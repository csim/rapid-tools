//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace Rapid.Tools.SPDeploy.AddIn.Proxies.AddIn {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AddInWebServiceSoap", Namespace="http://ascentium.com/RapidTools")]
    public partial class AddInWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetSolutionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActivatedSiteFeaturesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSolutionOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeploySolutionOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSiteFeatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveSiteFeatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpgradeSolutionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetractSolutionOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSolutionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSiteStructureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebStructureOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsCheckedOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ViewsOperationCompleted;
        
        private System.Threading.SendOrPostCallback featureFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenBinaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveBinaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInstalledFeatuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFeatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebFeaturesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveFeatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback PerformFileActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenBinaryFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetViewSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetViewNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContentTypeNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContentTypeNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompareFeatureFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateViewSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerNameOperationCompleted;
        
        /// <remarks/>
        public AddInWebService() {
            this.Url = "http://wa1devnint01/_layouts/RapidTools/Services/AddIn.asmx";
        }
        
        /// <remarks/>
        public event GetSolutionsCompletedEventHandler GetSolutionsCompleted;
        
        /// <remarks/>
        public event GetActivatedSiteFeaturesCompletedEventHandler GetActivatedSiteFeaturesCompleted;
        
        /// <remarks/>
        public event AddSolutionCompletedEventHandler AddSolutionCompleted;
        
        /// <remarks/>
        public event DeploySolutionCompletedEventHandler DeploySolutionCompleted;
        
        /// <remarks/>
        public event AddSiteFeatureCompletedEventHandler AddSiteFeatureCompleted;
        
        /// <remarks/>
        public event RemoveSiteFeatureCompletedEventHandler RemoveSiteFeatureCompleted;
        
        /// <remarks/>
        public event UpgradeSolutionCompletedEventHandler UpgradeSolutionCompleted;
        
        /// <remarks/>
        public event RetractSolutionCompletedEventHandler RetractSolutionCompleted;
        
        /// <remarks/>
        public event DeleteSolutionCompletedEventHandler DeleteSolutionCompleted;
        
        /// <remarks/>
        public event GetSiteStructureCompletedEventHandler GetSiteStructureCompleted;
        
        /// <remarks/>
        public event GetWebStructureCompletedEventHandler GetWebStructureCompleted;
        
        /// <remarks/>
        public event DeleteFileCompletedEventHandler DeleteFileCompleted;
        
        /// <remarks/>
        public event AddFileCompletedEventHandler AddFileCompleted;
        
        /// <remarks/>
        public event IsCheckedOutCompletedEventHandler IsCheckedOutCompleted;
        
        /// <remarks/>
        public event GetFileInfoCompletedEventHandler GetFileInfoCompleted;
        
        /// <remarks/>
        public event ViewsCompletedEventHandler ViewsCompleted;
        
        /// <remarks/>
        public event featureFilesCompletedEventHandler featureFilesCompleted;
        
        /// <remarks/>
        public event OpenBinaryCompletedEventHandler OpenBinaryCompleted;
        
        /// <remarks/>
        public event SaveBinaryCompletedEventHandler SaveBinaryCompleted;
        
        /// <remarks/>
        public event GetInstalledFeatuesCompletedEventHandler GetInstalledFeatuesCompleted;
        
        /// <remarks/>
        public event AddFeatureCompletedEventHandler AddFeatureCompleted;
        
        /// <remarks/>
        public event GetWebFeaturesCompletedEventHandler GetWebFeaturesCompleted;
        
        /// <remarks/>
        public event RemoveFeatureCompletedEventHandler RemoveFeatureCompleted;
        
        /// <remarks/>
        public event PerformFileActionCompletedEventHandler PerformFileActionCompleted;
        
        /// <remarks/>
        public event getInfoCompletedEventHandler getInfoCompleted;
        
        /// <remarks/>
        public event OpenBinaryFileCompletedEventHandler OpenBinaryFileCompleted;
        
        /// <remarks/>
        public event GetOptionsCompletedEventHandler GetOptionsCompleted;
        
        /// <remarks/>
        public event GetViewSchemaCompletedEventHandler GetViewSchemaCompleted;
        
        /// <remarks/>
        public event GetViewNodesCompletedEventHandler GetViewNodesCompleted;
        
        /// <remarks/>
        public event GetContentTypeNameCompletedEventHandler GetContentTypeNameCompleted;
        
        /// <remarks/>
        public event GetContentTypeNamesCompletedEventHandler GetContentTypeNamesCompleted;
        
        /// <remarks/>
        public event GetListSchemaCompletedEventHandler GetListSchemaCompleted;
        
        /// <remarks/>
        public event CompareFeatureFileCompletedEventHandler CompareFeatureFileCompleted;
        
        /// <remarks/>
        public event UpdateViewSchemaCompletedEventHandler UpdateViewSchemaCompleted;
        
        /// <remarks/>
        public event OpenFileCompletedEventHandler OpenFileCompleted;
        
        /// <remarks/>
        public event GetServerNameCompletedEventHandler GetServerNameCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/GetSolutions", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Solution[] GetSolutions() {
            object[] results = this.Invoke("GetSolutions", new object[0]);
            return ((Solution[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSolutions(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSolutions", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Solution[] EndGetSolutions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Solution[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSolutionsAsync() {
            this.GetSolutionsAsync(null);
        }
        
        /// <remarks/>
        public void GetSolutionsAsync(object userState) {
            if ((this.GetSolutionsOperationCompleted == null)) {
                this.GetSolutionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSolutionsOperationCompleted);
            }
            this.InvokeAsync("GetSolutions", new object[0], this.GetSolutionsOperationCompleted, userState);
        }
        
        private void OnGetSolutionsOperationCompleted(object arg) {
            if ((this.GetSolutionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSolutionsCompleted(this, new GetSolutionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/GetActivatedSiteFeatures", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid[] GetActivatedSiteFeatures() {
            object[] results = this.Invoke("GetActivatedSiteFeatures", new object[0]);
            return ((System.Guid[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActivatedSiteFeatures(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActivatedSiteFeatures", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Guid[] EndGetActivatedSiteFeatures(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Guid[])(results[0]));
        }
        
        /// <remarks/>
        public void GetActivatedSiteFeaturesAsync() {
            this.GetActivatedSiteFeaturesAsync(null);
        }
        
        /// <remarks/>
        public void GetActivatedSiteFeaturesAsync(object userState) {
            if ((this.GetActivatedSiteFeaturesOperationCompleted == null)) {
                this.GetActivatedSiteFeaturesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActivatedSiteFeaturesOperationCompleted);
            }
            this.InvokeAsync("GetActivatedSiteFeatures", new object[0], this.GetActivatedSiteFeaturesOperationCompleted, userState);
        }
        
        private void OnGetActivatedSiteFeaturesOperationCompleted(object arg) {
            if ((this.GetActivatedSiteFeaturesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActivatedSiteFeaturesCompleted(this, new GetActivatedSiteFeaturesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/AddSolution", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddSolution(string wspName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] wspcontents) {
            object[] results = this.Invoke("AddSolution", new object[] {
                        wspName,
                        wspcontents});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddSolution(string wspName, byte[] wspcontents, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddSolution", new object[] {
                        wspName,
                        wspcontents}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAddSolution(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddSolutionAsync(string wspName, byte[] wspcontents) {
            this.AddSolutionAsync(wspName, wspcontents, null);
        }
        
        /// <remarks/>
        public void AddSolutionAsync(string wspName, byte[] wspcontents, object userState) {
            if ((this.AddSolutionOperationCompleted == null)) {
                this.AddSolutionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSolutionOperationCompleted);
            }
            this.InvokeAsync("AddSolution", new object[] {
                        wspName,
                        wspcontents}, this.AddSolutionOperationCompleted, userState);
        }
        
        private void OnAddSolutionOperationCompleted(object arg) {
            if ((this.AddSolutionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSolutionCompleted(this, new AddSolutionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/DeploySolution", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeploySolution(string wspName) {
            object[] results = this.Invoke("DeploySolution", new object[] {
                        wspName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeploySolution(string wspName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeploySolution", new object[] {
                        wspName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndDeploySolution(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeploySolutionAsync(string wspName) {
            this.DeploySolutionAsync(wspName, null);
        }
        
        /// <remarks/>
        public void DeploySolutionAsync(string wspName, object userState) {
            if ((this.DeploySolutionOperationCompleted == null)) {
                this.DeploySolutionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeploySolutionOperationCompleted);
            }
            this.InvokeAsync("DeploySolution", new object[] {
                        wspName}, this.DeploySolutionOperationCompleted, userState);
        }
        
        private void OnDeploySolutionOperationCompleted(object arg) {
            if ((this.DeploySolutionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeploySolutionCompleted(this, new DeploySolutionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/AddSiteFeature", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddSiteFeature(System.Guid featureId) {
            object[] results = this.Invoke("AddSiteFeature", new object[] {
                        featureId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddSiteFeature(System.Guid featureId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddSiteFeature", new object[] {
                        featureId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAddSiteFeature(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddSiteFeatureAsync(System.Guid featureId) {
            this.AddSiteFeatureAsync(featureId, null);
        }
        
        /// <remarks/>
        public void AddSiteFeatureAsync(System.Guid featureId, object userState) {
            if ((this.AddSiteFeatureOperationCompleted == null)) {
                this.AddSiteFeatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSiteFeatureOperationCompleted);
            }
            this.InvokeAsync("AddSiteFeature", new object[] {
                        featureId}, this.AddSiteFeatureOperationCompleted, userState);
        }
        
        private void OnAddSiteFeatureOperationCompleted(object arg) {
            if ((this.AddSiteFeatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSiteFeatureCompleted(this, new AddSiteFeatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/RemoveSiteFeature", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemoveSiteFeature(System.Guid featureId) {
            object[] results = this.Invoke("RemoveSiteFeature", new object[] {
                        featureId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveSiteFeature(System.Guid featureId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveSiteFeature", new object[] {
                        featureId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRemoveSiteFeature(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveSiteFeatureAsync(System.Guid featureId) {
            this.RemoveSiteFeatureAsync(featureId, null);
        }
        
        /// <remarks/>
        public void RemoveSiteFeatureAsync(System.Guid featureId, object userState) {
            if ((this.RemoveSiteFeatureOperationCompleted == null)) {
                this.RemoveSiteFeatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveSiteFeatureOperationCompleted);
            }
            this.InvokeAsync("RemoveSiteFeature", new object[] {
                        featureId}, this.RemoveSiteFeatureOperationCompleted, userState);
        }
        
        private void OnRemoveSiteFeatureOperationCompleted(object arg) {
            if ((this.RemoveSiteFeatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveSiteFeatureCompleted(this, new RemoveSiteFeatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/UpgradeSolution", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpgradeSolution(string wspName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] wspcontents) {
            object[] results = this.Invoke("UpgradeSolution", new object[] {
                        wspName,
                        wspcontents});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpgradeSolution(string wspName, byte[] wspcontents, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpgradeSolution", new object[] {
                        wspName,
                        wspcontents}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndUpgradeSolution(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpgradeSolutionAsync(string wspName, byte[] wspcontents) {
            this.UpgradeSolutionAsync(wspName, wspcontents, null);
        }
        
        /// <remarks/>
        public void UpgradeSolutionAsync(string wspName, byte[] wspcontents, object userState) {
            if ((this.UpgradeSolutionOperationCompleted == null)) {
                this.UpgradeSolutionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpgradeSolutionOperationCompleted);
            }
            this.InvokeAsync("UpgradeSolution", new object[] {
                        wspName,
                        wspcontents}, this.UpgradeSolutionOperationCompleted, userState);
        }
        
        private void OnUpgradeSolutionOperationCompleted(object arg) {
            if ((this.UpgradeSolutionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpgradeSolutionCompleted(this, new UpgradeSolutionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/RetractSolution", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RetractSolution(string wspName) {
            object[] results = this.Invoke("RetractSolution", new object[] {
                        wspName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRetractSolution(string wspName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetractSolution", new object[] {
                        wspName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRetractSolution(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RetractSolutionAsync(string wspName) {
            this.RetractSolutionAsync(wspName, null);
        }
        
        /// <remarks/>
        public void RetractSolutionAsync(string wspName, object userState) {
            if ((this.RetractSolutionOperationCompleted == null)) {
                this.RetractSolutionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetractSolutionOperationCompleted);
            }
            this.InvokeAsync("RetractSolution", new object[] {
                        wspName}, this.RetractSolutionOperationCompleted, userState);
        }
        
        private void OnRetractSolutionOperationCompleted(object arg) {
            if ((this.RetractSolutionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetractSolutionCompleted(this, new RetractSolutionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/DeleteSolution", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteSolution(string wspName) {
            object[] results = this.Invoke("DeleteSolution", new object[] {
                        wspName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteSolution(string wspName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteSolution", new object[] {
                        wspName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndDeleteSolution(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteSolutionAsync(string wspName) {
            this.DeleteSolutionAsync(wspName, null);
        }
        
        /// <remarks/>
        public void DeleteSolutionAsync(string wspName, object userState) {
            if ((this.DeleteSolutionOperationCompleted == null)) {
                this.DeleteSolutionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSolutionOperationCompleted);
            }
            this.InvokeAsync("DeleteSolution", new object[] {
                        wspName}, this.DeleteSolutionOperationCompleted, userState);
        }
        
        private void OnDeleteSolutionOperationCompleted(object arg) {
            if ((this.DeleteSolutionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSolutionCompleted(this, new DeleteSolutionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/GetSiteStructure", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetSiteStructure() {
            object[] results = this.Invoke("GetSiteStructure", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSiteStructure(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSiteStructure", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndGetSiteStructure(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetSiteStructureAsync() {
            this.GetSiteStructureAsync(null);
        }
        
        /// <remarks/>
        public void GetSiteStructureAsync(object userState) {
            if ((this.GetSiteStructureOperationCompleted == null)) {
                this.GetSiteStructureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteStructureOperationCompleted);
            }
            this.InvokeAsync("GetSiteStructure", new object[0], this.GetSiteStructureOperationCompleted, userState);
        }
        
        private void OnGetSiteStructureOperationCompleted(object arg) {
            if ((this.GetSiteStructureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteStructureCompleted(this, new GetSiteStructureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/GetWebStructure", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetWebStructure(System.Guid webid) {
            object[] results = this.Invoke("GetWebStructure", new object[] {
                        webid});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWebStructure(System.Guid webid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWebStructure", new object[] {
                        webid}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndGetWebStructure(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetWebStructureAsync(System.Guid webid) {
            this.GetWebStructureAsync(webid, null);
        }
        
        /// <remarks/>
        public void GetWebStructureAsync(System.Guid webid, object userState) {
            if ((this.GetWebStructureOperationCompleted == null)) {
                this.GetWebStructureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebStructureOperationCompleted);
            }
            this.InvokeAsync("GetWebStructure", new object[] {
                        webid}, this.GetWebStructureOperationCompleted, userState);
        }
        
        private void OnGetWebStructureOperationCompleted(object arg) {
            if ((this.GetWebStructureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebStructureCompleted(this, new GetWebStructureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/DeleteFile", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteFile(string fileUrl) {
            this.Invoke("DeleteFile", new object[] {
                        fileUrl});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteFile(string fileUrl, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteFile", new object[] {
                        fileUrl}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteFileAsync(string fileUrl) {
            this.DeleteFileAsync(fileUrl, null);
        }
        
        /// <remarks/>
        public void DeleteFileAsync(string fileUrl, object userState) {
            if ((this.DeleteFileOperationCompleted == null)) {
                this.DeleteFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFileOperationCompleted);
            }
            this.InvokeAsync("DeleteFile", new object[] {
                        fileUrl}, this.DeleteFileOperationCompleted, userState);
        }
        
        private void OnDeleteFileOperationCompleted(object arg) {
            if ((this.DeleteFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/AddFile", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddFile(System.Guid listID, string fileUrl, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytes) {
            this.Invoke("AddFile", new object[] {
                        listID,
                        fileUrl,
                        bytes});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddFile(System.Guid listID, string fileUrl, byte[] bytes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddFile", new object[] {
                        listID,
                        fileUrl,
                        bytes}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddFileAsync(System.Guid listID, string fileUrl, byte[] bytes) {
            this.AddFileAsync(listID, fileUrl, bytes, null);
        }
        
        /// <remarks/>
        public void AddFileAsync(System.Guid listID, string fileUrl, byte[] bytes, object userState) {
            if ((this.AddFileOperationCompleted == null)) {
                this.AddFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFileOperationCompleted);
            }
            this.InvokeAsync("AddFile", new object[] {
                        listID,
                        fileUrl,
                        bytes}, this.AddFileOperationCompleted, userState);
        }
        
        private void OnAddFileOperationCompleted(object arg) {
            if ((this.AddFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/IsCheckedOut", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsCheckedOut(System.Guid webID, System.Guid fileID) {
            object[] results = this.Invoke("IsCheckedOut", new object[] {
                        webID,
                        fileID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsCheckedOut(System.Guid webID, System.Guid fileID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsCheckedOut", new object[] {
                        webID,
                        fileID}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsCheckedOut(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsCheckedOutAsync(System.Guid webID, System.Guid fileID) {
            this.IsCheckedOutAsync(webID, fileID, null);
        }
        
        /// <remarks/>
        public void IsCheckedOutAsync(System.Guid webID, System.Guid fileID, object userState) {
            if ((this.IsCheckedOutOperationCompleted == null)) {
                this.IsCheckedOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsCheckedOutOperationCompleted);
            }
            this.InvokeAsync("IsCheckedOut", new object[] {
                        webID,
                        fileID}, this.IsCheckedOutOperationCompleted, userState);
        }
        
        private void OnIsCheckedOutOperationCompleted(object arg) {
            if ((this.IsCheckedOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsCheckedOutCompleted(this, new IsCheckedOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/GetFileInfo", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFileInfo(System.Guid webID, System.Guid fileID) {
            object[] results = this.Invoke("GetFileInfo", new object[] {
                        webID,
                        fileID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFileInfo(System.Guid webID, System.Guid fileID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFileInfo", new object[] {
                        webID,
                        fileID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetFileInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileInfoAsync(System.Guid webID, System.Guid fileID) {
            this.GetFileInfoAsync(webID, fileID, null);
        }
        
        /// <remarks/>
        public void GetFileInfoAsync(System.Guid webID, System.Guid fileID, object userState) {
            if ((this.GetFileInfoOperationCompleted == null)) {
                this.GetFileInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileInfoOperationCompleted);
            }
            this.InvokeAsync("GetFileInfo", new object[] {
                        webID,
                        fileID}, this.GetFileInfoOperationCompleted, userState);
        }
        
        private void OnGetFileInfoOperationCompleted(object arg) {
            if ((this.GetFileInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileInfoCompleted(this, new GetFileInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/Views", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Views(System.Guid webID, System.Guid listID) {
            object[] results = this.Invoke("Views", new object[] {
                        webID,
                        listID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginViews(System.Guid webID, System.Guid listID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Views", new object[] {
                        webID,
                        listID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndViews(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void ViewsAsync(System.Guid webID, System.Guid listID) {
            this.ViewsAsync(webID, listID, null);
        }
        
        /// <remarks/>
        public void ViewsAsync(System.Guid webID, System.Guid listID, object userState) {
            if ((this.ViewsOperationCompleted == null)) {
                this.ViewsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnViewsOperationCompleted);
            }
            this.InvokeAsync("Views", new object[] {
                        webID,
                        listID}, this.ViewsOperationCompleted, userState);
        }
        
        private void OnViewsOperationCompleted(object arg) {
            if ((this.ViewsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ViewsCompleted(this, new ViewsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/featureFiles", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] featureFiles(string listSchema) {
            object[] results = this.Invoke("featureFiles", new object[] {
                        listSchema});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginfeatureFiles(string listSchema, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("featureFiles", new object[] {
                        listSchema}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndfeatureFiles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void featureFilesAsync(string listSchema) {
            this.featureFilesAsync(listSchema, null);
        }
        
        /// <remarks/>
        public void featureFilesAsync(string listSchema, object userState) {
            if ((this.featureFilesOperationCompleted == null)) {
                this.featureFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfeatureFilesOperationCompleted);
            }
            this.InvokeAsync("featureFiles", new object[] {
                        listSchema}, this.featureFilesOperationCompleted, userState);
        }
        
        private void OnfeatureFilesOperationCompleted(object arg) {
            if ((this.featureFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.featureFilesCompleted(this, new featureFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/OpenBinary", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] OpenBinary(System.Guid webID, System.Guid fileID) {
            object[] results = this.Invoke("OpenBinary", new object[] {
                        webID,
                        fileID});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginOpenBinary(System.Guid webID, System.Guid fileID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("OpenBinary", new object[] {
                        webID,
                        fileID}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndOpenBinary(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void OpenBinaryAsync(System.Guid webID, System.Guid fileID) {
            this.OpenBinaryAsync(webID, fileID, null);
        }
        
        /// <remarks/>
        public void OpenBinaryAsync(System.Guid webID, System.Guid fileID, object userState) {
            if ((this.OpenBinaryOperationCompleted == null)) {
                this.OpenBinaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenBinaryOperationCompleted);
            }
            this.InvokeAsync("OpenBinary", new object[] {
                        webID,
                        fileID}, this.OpenBinaryOperationCompleted, userState);
        }
        
        private void OnOpenBinaryOperationCompleted(object arg) {
            if ((this.OpenBinaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenBinaryCompleted(this, new OpenBinaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/SaveBinary", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveBinary(System.Guid webID, System.Guid fileID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytes) {
            object[] results = this.Invoke("SaveBinary", new object[] {
                        webID,
                        fileID,
                        bytes});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveBinary(System.Guid webID, System.Guid fileID, byte[] bytes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveBinary", new object[] {
                        webID,
                        fileID,
                        bytes}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndSaveBinary(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveBinaryAsync(System.Guid webID, System.Guid fileID, byte[] bytes) {
            this.SaveBinaryAsync(webID, fileID, bytes, null);
        }
        
        /// <remarks/>
        public void SaveBinaryAsync(System.Guid webID, System.Guid fileID, byte[] bytes, object userState) {
            if ((this.SaveBinaryOperationCompleted == null)) {
                this.SaveBinaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveBinaryOperationCompleted);
            }
            this.InvokeAsync("SaveBinary", new object[] {
                        webID,
                        fileID,
                        bytes}, this.SaveBinaryOperationCompleted, userState);
        }
        
        private void OnSaveBinaryOperationCompleted(object arg) {
            if ((this.SaveBinaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveBinaryCompleted(this, new SaveBinaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/GetInstalledFeatues", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetInstalledFeatues(System.Guid[] featureIds) {
            object[] results = this.Invoke("GetInstalledFeatues", new object[] {
                        featureIds});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetInstalledFeatues(System.Guid[] featureIds, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetInstalledFeatues", new object[] {
                        featureIds}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetInstalledFeatues(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetInstalledFeatuesAsync(System.Guid[] featureIds) {
            this.GetInstalledFeatuesAsync(featureIds, null);
        }
        
        /// <remarks/>
        public void GetInstalledFeatuesAsync(System.Guid[] featureIds, object userState) {
            if ((this.GetInstalledFeatuesOperationCompleted == null)) {
                this.GetInstalledFeatuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstalledFeatuesOperationCompleted);
            }
            this.InvokeAsync("GetInstalledFeatues", new object[] {
                        featureIds}, this.GetInstalledFeatuesOperationCompleted, userState);
        }
        
        private void OnGetInstalledFeatuesOperationCompleted(object arg) {
            if ((this.GetInstalledFeatuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstalledFeatuesCompleted(this, new GetInstalledFeatuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/AddFeature", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddFeature(System.Guid webID, System.Guid featureId) {
            object[] results = this.Invoke("AddFeature", new object[] {
                        webID,
                        featureId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddFeature(System.Guid webID, System.Guid featureId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddFeature", new object[] {
                        webID,
                        featureId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAddFeature(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddFeatureAsync(System.Guid webID, System.Guid featureId) {
            this.AddFeatureAsync(webID, featureId, null);
        }
        
        /// <remarks/>
        public void AddFeatureAsync(System.Guid webID, System.Guid featureId, object userState) {
            if ((this.AddFeatureOperationCompleted == null)) {
                this.AddFeatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFeatureOperationCompleted);
            }
            this.InvokeAsync("AddFeature", new object[] {
                        webID,
                        featureId}, this.AddFeatureOperationCompleted, userState);
        }
        
        private void OnAddFeatureOperationCompleted(object arg) {
            if ((this.AddFeatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFeatureCompleted(this, new AddFeatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/GetWebFeatures", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid[] GetWebFeatures(System.Guid webGuid) {
            object[] results = this.Invoke("GetWebFeatures", new object[] {
                        webGuid});
            return ((System.Guid[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWebFeatures(System.Guid webGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWebFeatures", new object[] {
                        webGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Guid[] EndGetWebFeatures(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Guid[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWebFeaturesAsync(System.Guid webGuid) {
            this.GetWebFeaturesAsync(webGuid, null);
        }
        
        /// <remarks/>
        public void GetWebFeaturesAsync(System.Guid webGuid, object userState) {
            if ((this.GetWebFeaturesOperationCompleted == null)) {
                this.GetWebFeaturesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebFeaturesOperationCompleted);
            }
            this.InvokeAsync("GetWebFeatures", new object[] {
                        webGuid}, this.GetWebFeaturesOperationCompleted, userState);
        }
        
        private void OnGetWebFeaturesOperationCompleted(object arg) {
            if ((this.GetWebFeaturesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebFeaturesCompleted(this, new GetWebFeaturesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/RemoveFeature", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemoveFeature(System.Guid webID, System.Guid featureId) {
            object[] results = this.Invoke("RemoveFeature", new object[] {
                        webID,
                        featureId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveFeature(System.Guid webID, System.Guid featureId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveFeature", new object[] {
                        webID,
                        featureId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRemoveFeature(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveFeatureAsync(System.Guid webID, System.Guid featureId) {
            this.RemoveFeatureAsync(webID, featureId, null);
        }
        
        /// <remarks/>
        public void RemoveFeatureAsync(System.Guid webID, System.Guid featureId, object userState) {
            if ((this.RemoveFeatureOperationCompleted == null)) {
                this.RemoveFeatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveFeatureOperationCompleted);
            }
            this.InvokeAsync("RemoveFeature", new object[] {
                        webID,
                        featureId}, this.RemoveFeatureOperationCompleted, userState);
        }
        
        private void OnRemoveFeatureOperationCompleted(object arg) {
            if ((this.RemoveFeatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveFeatureCompleted(this, new RemoveFeatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/PerformFileAction", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PerformFileAction(System.Guid webID, System.Guid fileID, FileActions action) {
            object[] results = this.Invoke("PerformFileAction", new object[] {
                        webID,
                        fileID,
                        action});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPerformFileAction(System.Guid webID, System.Guid fileID, FileActions action, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PerformFileAction", new object[] {
                        webID,
                        fileID,
                        action}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndPerformFileAction(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PerformFileActionAsync(System.Guid webID, System.Guid fileID, FileActions action) {
            this.PerformFileActionAsync(webID, fileID, action, null);
        }
        
        /// <remarks/>
        public void PerformFileActionAsync(System.Guid webID, System.Guid fileID, FileActions action, object userState) {
            if ((this.PerformFileActionOperationCompleted == null)) {
                this.PerformFileActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPerformFileActionOperationCompleted);
            }
            this.InvokeAsync("PerformFileAction", new object[] {
                        webID,
                        fileID,
                        action}, this.PerformFileActionOperationCompleted, userState);
        }
        
        private void OnPerformFileActionOperationCompleted(object arg) {
            if ((this.PerformFileActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PerformFileActionCompleted(this, new PerformFileActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/getInfo", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getInfo(System.Guid webUid, System.Guid listID) {
            object[] results = this.Invoke("getInfo", new object[] {
                        webUid,
                        listID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetInfo(System.Guid webUid, System.Guid listID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getInfo", new object[] {
                        webUid,
                        listID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndgetInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getInfoAsync(System.Guid webUid, System.Guid listID) {
            this.getInfoAsync(webUid, listID, null);
        }
        
        /// <remarks/>
        public void getInfoAsync(System.Guid webUid, System.Guid listID, object userState) {
            if ((this.getInfoOperationCompleted == null)) {
                this.getInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInfoOperationCompleted);
            }
            this.InvokeAsync("getInfo", new object[] {
                        webUid,
                        listID}, this.getInfoOperationCompleted, userState);
        }
        
        private void OngetInfoOperationCompleted(object arg) {
            if ((this.getInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInfoCompleted(this, new getInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/OpenBinaryFile", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] OpenBinaryFile(System.Guid webID, System.Guid fileID) {
            object[] results = this.Invoke("OpenBinaryFile", new object[] {
                        webID,
                        fileID});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginOpenBinaryFile(System.Guid webID, System.Guid fileID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("OpenBinaryFile", new object[] {
                        webID,
                        fileID}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndOpenBinaryFile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void OpenBinaryFileAsync(System.Guid webID, System.Guid fileID) {
            this.OpenBinaryFileAsync(webID, fileID, null);
        }
        
        /// <remarks/>
        public void OpenBinaryFileAsync(System.Guid webID, System.Guid fileID, object userState) {
            if ((this.OpenBinaryFileOperationCompleted == null)) {
                this.OpenBinaryFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenBinaryFileOperationCompleted);
            }
            this.InvokeAsync("OpenBinaryFile", new object[] {
                        webID,
                        fileID}, this.OpenBinaryFileOperationCompleted, userState);
        }
        
        private void OnOpenBinaryFileOperationCompleted(object arg) {
            if ((this.OpenBinaryFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenBinaryFileCompleted(this, new OpenBinaryFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/GetOptions", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ListOptions GetOptions(System.Guid webUid, System.Guid listID) {
            object[] results = this.Invoke("GetOptions", new object[] {
                        webUid,
                        listID});
            return ((ListOptions)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOptions(System.Guid webUid, System.Guid listID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOptions", new object[] {
                        webUid,
                        listID}, callback, asyncState);
        }
        
        /// <remarks/>
        public ListOptions EndGetOptions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ListOptions)(results[0]));
        }
        
        /// <remarks/>
        public void GetOptionsAsync(System.Guid webUid, System.Guid listID) {
            this.GetOptionsAsync(webUid, listID, null);
        }
        
        /// <remarks/>
        public void GetOptionsAsync(System.Guid webUid, System.Guid listID, object userState) {
            if ((this.GetOptionsOperationCompleted == null)) {
                this.GetOptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOptionsOperationCompleted);
            }
            this.InvokeAsync("GetOptions", new object[] {
                        webUid,
                        listID}, this.GetOptionsOperationCompleted, userState);
        }
        
        private void OnGetOptionsOperationCompleted(object arg) {
            if ((this.GetOptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOptionsCompleted(this, new GetOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/GetViewSchema", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetViewSchema(System.Guid webUid, System.Guid listID, string viewNAme) {
            object[] results = this.Invoke("GetViewSchema", new object[] {
                        webUid,
                        listID,
                        viewNAme});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetViewSchema(System.Guid webUid, System.Guid listID, string viewNAme, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetViewSchema", new object[] {
                        webUid,
                        listID,
                        viewNAme}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetViewSchema(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetViewSchemaAsync(System.Guid webUid, System.Guid listID, string viewNAme) {
            this.GetViewSchemaAsync(webUid, listID, viewNAme, null);
        }
        
        /// <remarks/>
        public void GetViewSchemaAsync(System.Guid webUid, System.Guid listID, string viewNAme, object userState) {
            if ((this.GetViewSchemaOperationCompleted == null)) {
                this.GetViewSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetViewSchemaOperationCompleted);
            }
            this.InvokeAsync("GetViewSchema", new object[] {
                        webUid,
                        listID,
                        viewNAme}, this.GetViewSchemaOperationCompleted, userState);
        }
        
        private void OnGetViewSchemaOperationCompleted(object arg) {
            if ((this.GetViewSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetViewSchemaCompleted(this, new GetViewSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/GetViewNodes", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetViewNodes(System.Guid webID, System.Guid listID) {
            object[] results = this.Invoke("GetViewNodes", new object[] {
                        webID,
                        listID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetViewNodes(System.Guid webID, System.Guid listID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetViewNodes", new object[] {
                        webID,
                        listID}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndGetViewNodes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetViewNodesAsync(System.Guid webID, System.Guid listID) {
            this.GetViewNodesAsync(webID, listID, null);
        }
        
        /// <remarks/>
        public void GetViewNodesAsync(System.Guid webID, System.Guid listID, object userState) {
            if ((this.GetViewNodesOperationCompleted == null)) {
                this.GetViewNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetViewNodesOperationCompleted);
            }
            this.InvokeAsync("GetViewNodes", new object[] {
                        webID,
                        listID}, this.GetViewNodesOperationCompleted, userState);
        }
        
        private void OnGetViewNodesOperationCompleted(object arg) {
            if ((this.GetViewNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetViewNodesCompleted(this, new GetViewNodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/GetContentTypeName", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetContentTypeName(string contentTypeId) {
            object[] results = this.Invoke("GetContentTypeName", new object[] {
                        contentTypeId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetContentTypeName(string contentTypeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetContentTypeName", new object[] {
                        contentTypeId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetContentTypeName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetContentTypeNameAsync(string contentTypeId) {
            this.GetContentTypeNameAsync(contentTypeId, null);
        }
        
        /// <remarks/>
        public void GetContentTypeNameAsync(string contentTypeId, object userState) {
            if ((this.GetContentTypeNameOperationCompleted == null)) {
                this.GetContentTypeNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContentTypeNameOperationCompleted);
            }
            this.InvokeAsync("GetContentTypeName", new object[] {
                        contentTypeId}, this.GetContentTypeNameOperationCompleted, userState);
        }
        
        private void OnGetContentTypeNameOperationCompleted(object arg) {
            if ((this.GetContentTypeNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContentTypeNameCompleted(this, new GetContentTypeNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/GetContentTypeNames", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetContentTypeNames(System.Guid webID, System.Guid listID) {
            object[] results = this.Invoke("GetContentTypeNames", new object[] {
                        webID,
                        listID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetContentTypeNames(System.Guid webID, System.Guid listID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetContentTypeNames", new object[] {
                        webID,
                        listID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetContentTypeNames(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetContentTypeNamesAsync(System.Guid webID, System.Guid listID) {
            this.GetContentTypeNamesAsync(webID, listID, null);
        }
        
        /// <remarks/>
        public void GetContentTypeNamesAsync(System.Guid webID, System.Guid listID, object userState) {
            if ((this.GetContentTypeNamesOperationCompleted == null)) {
                this.GetContentTypeNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContentTypeNamesOperationCompleted);
            }
            this.InvokeAsync("GetContentTypeNames", new object[] {
                        webID,
                        listID}, this.GetContentTypeNamesOperationCompleted, userState);
        }
        
        private void OnGetContentTypeNamesOperationCompleted(object arg) {
            if ((this.GetContentTypeNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContentTypeNamesCompleted(this, new GetContentTypeNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/GetListSchema", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListSchema(System.Guid webUid, System.Guid listID) {
            object[] results = this.Invoke("GetListSchema", new object[] {
                        webUid,
                        listID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetListSchema(System.Guid webUid, System.Guid listID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetListSchema", new object[] {
                        webUid,
                        listID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetListSchema(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListSchemaAsync(System.Guid webUid, System.Guid listID) {
            this.GetListSchemaAsync(webUid, listID, null);
        }
        
        /// <remarks/>
        public void GetListSchemaAsync(System.Guid webUid, System.Guid listID, object userState) {
            if ((this.GetListSchemaOperationCompleted == null)) {
                this.GetListSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListSchemaOperationCompleted);
            }
            this.InvokeAsync("GetListSchema", new object[] {
                        webUid,
                        listID}, this.GetListSchemaOperationCompleted, userState);
        }
        
        private void OnGetListSchemaOperationCompleted(object arg) {
            if ((this.GetListSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListSchemaCompleted(this, new GetListSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/CompareFeatureFile", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] CompareFeatureFile(string relativeFilePath) {
            object[] results = this.Invoke("CompareFeatureFile", new object[] {
                        relativeFilePath});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCompareFeatureFile(string relativeFilePath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CompareFeatureFile", new object[] {
                        relativeFilePath}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndCompareFeatureFile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void CompareFeatureFileAsync(string relativeFilePath) {
            this.CompareFeatureFileAsync(relativeFilePath, null);
        }
        
        /// <remarks/>
        public void CompareFeatureFileAsync(string relativeFilePath, object userState) {
            if ((this.CompareFeatureFileOperationCompleted == null)) {
                this.CompareFeatureFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompareFeatureFileOperationCompleted);
            }
            this.InvokeAsync("CompareFeatureFile", new object[] {
                        relativeFilePath}, this.CompareFeatureFileOperationCompleted, userState);
        }
        
        private void OnCompareFeatureFileOperationCompleted(object arg) {
            if ((this.CompareFeatureFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompareFeatureFileCompleted(this, new CompareFeatureFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/UpdateViewSchema", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateViewSchema(System.Guid webUid, System.Guid listID, string viewNAme, System.Xml.XmlNode document) {
            this.Invoke("UpdateViewSchema", new object[] {
                        webUid,
                        listID,
                        viewNAme,
                        document});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateViewSchema(System.Guid webUid, System.Guid listID, string viewNAme, System.Xml.XmlNode document, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateViewSchema", new object[] {
                        webUid,
                        listID,
                        viewNAme,
                        document}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateViewSchema(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateViewSchemaAsync(System.Guid webUid, System.Guid listID, string viewNAme, System.Xml.XmlNode document) {
            this.UpdateViewSchemaAsync(webUid, listID, viewNAme, document, null);
        }
        
        /// <remarks/>
        public void UpdateViewSchemaAsync(System.Guid webUid, System.Guid listID, string viewNAme, System.Xml.XmlNode document, object userState) {
            if ((this.UpdateViewSchemaOperationCompleted == null)) {
                this.UpdateViewSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateViewSchemaOperationCompleted);
            }
            this.InvokeAsync("UpdateViewSchema", new object[] {
                        webUid,
                        listID,
                        viewNAme,
                        document}, this.UpdateViewSchemaOperationCompleted, userState);
        }
        
        private void OnUpdateViewSchemaOperationCompleted(object arg) {
            if ((this.UpdateViewSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateViewSchemaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/OpenFile", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] OpenFile(string filePath) {
            object[] results = this.Invoke("OpenFile", new object[] {
                        filePath});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginOpenFile(string filePath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("OpenFile", new object[] {
                        filePath}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndOpenFile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void OpenFileAsync(string filePath) {
            this.OpenFileAsync(filePath, null);
        }
        
        /// <remarks/>
        public void OpenFileAsync(string filePath, object userState) {
            if ((this.OpenFileOperationCompleted == null)) {
                this.OpenFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenFileOperationCompleted);
            }
            this.InvokeAsync("OpenFile", new object[] {
                        filePath}, this.OpenFileOperationCompleted, userState);
        }
        
        private void OnOpenFileOperationCompleted(object arg) {
            if ((this.OpenFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenFileCompleted(this, new OpenFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ascentium.com/RapidTools/GetServerName", RequestNamespace="http://ascentium.com/RapidTools", ResponseNamespace="http://ascentium.com/RapidTools", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServerName() {
            object[] results = this.Invoke("GetServerName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServerName(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServerName", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetServerName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerNameAsync() {
            this.GetServerNameAsync(null);
        }
        
        /// <remarks/>
        public void GetServerNameAsync(object userState) {
            if ((this.GetServerNameOperationCompleted == null)) {
                this.GetServerNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerNameOperationCompleted);
            }
            this.InvokeAsync("GetServerName", new object[0], this.GetServerNameOperationCompleted, userState);
        }
        
        private void OnGetServerNameOperationCompleted(object arg) {
            if ((this.GetServerNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerNameCompleted(this, new GetServerNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ascentium.com/RapidTools")]
    public partial class Solution {
        
        private string nameField;
        
        private bool deployedField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public bool Deployed {
            get {
                return this.deployedField;
            }
            set {
                this.deployedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ascentium.com/RapidTools")]
    public partial class ListOptions {
        
        private bool allowContentTypesField;
        
        private bool contentTypesEnabledField;
        
        /// <remarks/>
        public bool AllowContentTypes {
            get {
                return this.allowContentTypesField;
            }
            set {
                this.allowContentTypesField = value;
            }
        }
        
        /// <remarks/>
        public bool ContentTypesEnabled {
            get {
                return this.contentTypesEnabledField;
            }
            set {
                this.contentTypesEnabledField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ascentium.com/RapidTools")]
    public enum FileActions {
        
        /// <remarks/>
        CheckIn,
        
        /// <remarks/>
        CheckOut,
        
        /// <remarks/>
        Delete,
        
        /// <remarks/>
        UndoCheckOut,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSolutionsCompletedEventHandler(object sender, GetSolutionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSolutionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSolutionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Solution[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Solution[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetActivatedSiteFeaturesCompletedEventHandler(object sender, GetActivatedSiteFeaturesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActivatedSiteFeaturesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActivatedSiteFeaturesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddSolutionCompletedEventHandler(object sender, AddSolutionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSolutionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSolutionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeploySolutionCompletedEventHandler(object sender, DeploySolutionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeploySolutionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeploySolutionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddSiteFeatureCompletedEventHandler(object sender, AddSiteFeatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSiteFeatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSiteFeatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveSiteFeatureCompletedEventHandler(object sender, RemoveSiteFeatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveSiteFeatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveSiteFeatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpgradeSolutionCompletedEventHandler(object sender, UpgradeSolutionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpgradeSolutionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpgradeSolutionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetractSolutionCompletedEventHandler(object sender, RetractSolutionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetractSolutionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetractSolutionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteSolutionCompletedEventHandler(object sender, DeleteSolutionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSolutionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteSolutionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSiteStructureCompletedEventHandler(object sender, GetSiteStructureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteStructureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSiteStructureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetWebStructureCompletedEventHandler(object sender, GetWebStructureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebStructureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebStructureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void IsCheckedOutCompletedEventHandler(object sender, IsCheckedOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsCheckedOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsCheckedOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetFileInfoCompletedEventHandler(object sender, GetFileInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ViewsCompletedEventHandler(object sender, ViewsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ViewsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ViewsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void featureFilesCompletedEventHandler(object sender, featureFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class featureFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal featureFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void OpenBinaryCompletedEventHandler(object sender, OpenBinaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenBinaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenBinaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveBinaryCompletedEventHandler(object sender, SaveBinaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveBinaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveBinaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetInstalledFeatuesCompletedEventHandler(object sender, GetInstalledFeatuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInstalledFeatuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInstalledFeatuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddFeatureCompletedEventHandler(object sender, AddFeatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFeatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFeatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetWebFeaturesCompletedEventHandler(object sender, GetWebFeaturesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebFeaturesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebFeaturesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveFeatureCompletedEventHandler(object sender, RemoveFeatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveFeatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveFeatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void PerformFileActionCompletedEventHandler(object sender, PerformFileActionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PerformFileActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PerformFileActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void getInfoCompletedEventHandler(object sender, getInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void OpenBinaryFileCompletedEventHandler(object sender, OpenBinaryFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenBinaryFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenBinaryFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetOptionsCompletedEventHandler(object sender, GetOptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ListOptions Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ListOptions)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetViewSchemaCompletedEventHandler(object sender, GetViewSchemaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetViewSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetViewSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetViewNodesCompletedEventHandler(object sender, GetViewNodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetViewNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetViewNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetContentTypeNameCompletedEventHandler(object sender, GetContentTypeNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContentTypeNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContentTypeNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetContentTypeNamesCompletedEventHandler(object sender, GetContentTypeNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContentTypeNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContentTypeNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetListSchemaCompletedEventHandler(object sender, GetListSchemaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CompareFeatureFileCompletedEventHandler(object sender, CompareFeatureFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompareFeatureFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompareFeatureFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateViewSchemaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void OpenFileCompletedEventHandler(object sender, OpenFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetServerNameCompletedEventHandler(object sender, GetServerNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
