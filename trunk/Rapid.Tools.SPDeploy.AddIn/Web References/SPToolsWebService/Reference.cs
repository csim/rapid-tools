//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
// 
#pragma warning disable 1591

namespace Rapid.Tools.SPDeploy.AddIn.SPToolsWebService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SPToolsWebServiceSoap", Namespace="http://SPProject")]
    public partial class SPToolsWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetSiteStructureOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsCheckedOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback ViewsOperationCompleted;
        
        private System.Threading.SendOrPostCallback featureFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenBinaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveBinaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSolutionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSolsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeploySolutionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetractSolutionOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSolutionOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFeatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveFeatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback PerformFileActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetViewSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetViewNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContentTypeNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContentTypeNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateViewSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback OpenFileOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SPToolsWebService() {
            this.Url = global::Rapid.Tools.SPDeploy.AddIn.Properties.Settings.Default.Rapid_Tools_SPDeploy_AddIn_SPToolsWebService_SPToolsWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetSiteStructureCompletedEventHandler GetSiteStructureCompleted;
        
        /// <remarks/>
        public event DeleteFileCompletedEventHandler DeleteFileCompleted;
        
        /// <remarks/>
        public event AddFileCompletedEventHandler AddFileCompleted;
        
        /// <remarks/>
        public event IsCheckedOutCompletedEventHandler IsCheckedOutCompleted;
        
        /// <remarks/>
        public event ViewsCompletedEventHandler ViewsCompleted;
        
        /// <remarks/>
        public event featureFilesCompletedEventHandler featureFilesCompleted;
        
        /// <remarks/>
        public event OpenBinaryCompletedEventHandler OpenBinaryCompleted;
        
        /// <remarks/>
        public event SaveBinaryCompletedEventHandler SaveBinaryCompleted;
        
        /// <remarks/>
        public event GetSolutionsCompletedEventHandler GetSolutionsCompleted;
        
        /// <remarks/>
        public event GetSolsCompletedEventHandler GetSolsCompleted;
        
        /// <remarks/>
        public event DeploySolutionCompletedEventHandler DeploySolutionCompleted;
        
        /// <remarks/>
        public event RetractSolutionCompletedEventHandler RetractSolutionCompleted;
        
        /// <remarks/>
        public event DeleteSolutionCompletedEventHandler DeleteSolutionCompleted;
        
        /// <remarks/>
        public event AddFeatureCompletedEventHandler AddFeatureCompleted;
        
        /// <remarks/>
        public event RemoveFeatureCompletedEventHandler RemoveFeatureCompleted;
        
        /// <remarks/>
        public event PerformFileActionCompletedEventHandler PerformFileActionCompleted;
        
        /// <remarks/>
        public event getInfoCompletedEventHandler getInfoCompleted;
        
        /// <remarks/>
        public event GetOptionsCompletedEventHandler GetOptionsCompleted;
        
        /// <remarks/>
        public event GetViewSchemaCompletedEventHandler GetViewSchemaCompleted;
        
        /// <remarks/>
        public event GetViewNodesCompletedEventHandler GetViewNodesCompleted;
        
        /// <remarks/>
        public event GetContentTypeNameCompletedEventHandler GetContentTypeNameCompleted;
        
        /// <remarks/>
        public event GetContentTypeNamesCompletedEventHandler GetContentTypeNamesCompleted;
        
        /// <remarks/>
        public event GetListSchemaCompletedEventHandler GetListSchemaCompleted;
        
        /// <remarks/>
        public event UpdateViewSchemaCompletedEventHandler UpdateViewSchemaCompleted;
        
        /// <remarks/>
        public event OpenFileCompletedEventHandler OpenFileCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/GetSiteStructure", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetSiteStructure(string siteUrl) {
            object[] results = this.Invoke("GetSiteStructure", new object[] {
                        siteUrl});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetSiteStructureAsync(string siteUrl) {
            this.GetSiteStructureAsync(siteUrl, null);
        }
        
        /// <remarks/>
        public void GetSiteStructureAsync(string siteUrl, object userState) {
            if ((this.GetSiteStructureOperationCompleted == null)) {
                this.GetSiteStructureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteStructureOperationCompleted);
            }
            this.InvokeAsync("GetSiteStructure", new object[] {
                        siteUrl}, this.GetSiteStructureOperationCompleted, userState);
        }
        
        private void OnGetSiteStructureOperationCompleted(object arg) {
            if ((this.GetSiteStructureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteStructureCompleted(this, new GetSiteStructureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/DeleteFile", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteFile(string siteUrl, string fileUrl) {
            this.Invoke("DeleteFile", new object[] {
                        siteUrl,
                        fileUrl});
        }
        
        /// <remarks/>
        public void DeleteFileAsync(string siteUrl, string fileUrl) {
            this.DeleteFileAsync(siteUrl, fileUrl, null);
        }
        
        /// <remarks/>
        public void DeleteFileAsync(string siteUrl, string fileUrl, object userState) {
            if ((this.DeleteFileOperationCompleted == null)) {
                this.DeleteFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFileOperationCompleted);
            }
            this.InvokeAsync("DeleteFile", new object[] {
                        siteUrl,
                        fileUrl}, this.DeleteFileOperationCompleted, userState);
        }
        
        private void OnDeleteFileOperationCompleted(object arg) {
            if ((this.DeleteFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/AddFile", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddFile(string siteUrl, System.Guid listGuid, string fileUrl, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytes) {
            this.Invoke("AddFile", new object[] {
                        siteUrl,
                        listGuid,
                        fileUrl,
                        bytes});
        }
        
        /// <remarks/>
        public void AddFileAsync(string siteUrl, System.Guid listGuid, string fileUrl, byte[] bytes) {
            this.AddFileAsync(siteUrl, listGuid, fileUrl, bytes, null);
        }
        
        /// <remarks/>
        public void AddFileAsync(string siteUrl, System.Guid listGuid, string fileUrl, byte[] bytes, object userState) {
            if ((this.AddFileOperationCompleted == null)) {
                this.AddFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFileOperationCompleted);
            }
            this.InvokeAsync("AddFile", new object[] {
                        siteUrl,
                        listGuid,
                        fileUrl,
                        bytes}, this.AddFileOperationCompleted, userState);
        }
        
        private void OnAddFileOperationCompleted(object arg) {
            if ((this.AddFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/IsCheckedOut", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsCheckedOut(string siteUrl, string fileUrl) {
            object[] results = this.Invoke("IsCheckedOut", new object[] {
                        siteUrl,
                        fileUrl});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsCheckedOutAsync(string siteUrl, string fileUrl) {
            this.IsCheckedOutAsync(siteUrl, fileUrl, null);
        }
        
        /// <remarks/>
        public void IsCheckedOutAsync(string siteUrl, string fileUrl, object userState) {
            if ((this.IsCheckedOutOperationCompleted == null)) {
                this.IsCheckedOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsCheckedOutOperationCompleted);
            }
            this.InvokeAsync("IsCheckedOut", new object[] {
                        siteUrl,
                        fileUrl}, this.IsCheckedOutOperationCompleted, userState);
        }
        
        private void OnIsCheckedOutOperationCompleted(object arg) {
            if ((this.IsCheckedOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsCheckedOutCompleted(this, new IsCheckedOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/Views", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] Views(string siteUrl, System.Guid webGuid, System.Guid listGuid) {
            object[] results = this.Invoke("Views", new object[] {
                        siteUrl,
                        webGuid,
                        listGuid});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void ViewsAsync(string siteUrl, System.Guid webGuid, System.Guid listGuid) {
            this.ViewsAsync(siteUrl, webGuid, listGuid, null);
        }
        
        /// <remarks/>
        public void ViewsAsync(string siteUrl, System.Guid webGuid, System.Guid listGuid, object userState) {
            if ((this.ViewsOperationCompleted == null)) {
                this.ViewsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnViewsOperationCompleted);
            }
            this.InvokeAsync("Views", new object[] {
                        siteUrl,
                        webGuid,
                        listGuid}, this.ViewsOperationCompleted, userState);
        }
        
        private void OnViewsOperationCompleted(object arg) {
            if ((this.ViewsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ViewsCompleted(this, new ViewsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/featureFiles", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] featureFiles(string listSchema) {
            object[] results = this.Invoke("featureFiles", new object[] {
                        listSchema});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void featureFilesAsync(string listSchema) {
            this.featureFilesAsync(listSchema, null);
        }
        
        /// <remarks/>
        public void featureFilesAsync(string listSchema, object userState) {
            if ((this.featureFilesOperationCompleted == null)) {
                this.featureFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfeatureFilesOperationCompleted);
            }
            this.InvokeAsync("featureFiles", new object[] {
                        listSchema}, this.featureFilesOperationCompleted, userState);
        }
        
        private void OnfeatureFilesOperationCompleted(object arg) {
            if ((this.featureFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.featureFilesCompleted(this, new featureFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/OpenBinary", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] OpenBinary(string siteUrl, string fileUrl) {
            object[] results = this.Invoke("OpenBinary", new object[] {
                        siteUrl,
                        fileUrl});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void OpenBinaryAsync(string siteUrl, string fileUrl) {
            this.OpenBinaryAsync(siteUrl, fileUrl, null);
        }
        
        /// <remarks/>
        public void OpenBinaryAsync(string siteUrl, string fileUrl, object userState) {
            if ((this.OpenBinaryOperationCompleted == null)) {
                this.OpenBinaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenBinaryOperationCompleted);
            }
            this.InvokeAsync("OpenBinary", new object[] {
                        siteUrl,
                        fileUrl}, this.OpenBinaryOperationCompleted, userState);
        }
        
        private void OnOpenBinaryOperationCompleted(object arg) {
            if ((this.OpenBinaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenBinaryCompleted(this, new OpenBinaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/SaveBinary", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveBinary(string siteUrl, string fileUrl, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytes) {
            object[] results = this.Invoke("SaveBinary", new object[] {
                        siteUrl,
                        fileUrl,
                        bytes});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveBinaryAsync(string siteUrl, string fileUrl, byte[] bytes) {
            this.SaveBinaryAsync(siteUrl, fileUrl, bytes, null);
        }
        
        /// <remarks/>
        public void SaveBinaryAsync(string siteUrl, string fileUrl, byte[] bytes, object userState) {
            if ((this.SaveBinaryOperationCompleted == null)) {
                this.SaveBinaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveBinaryOperationCompleted);
            }
            this.InvokeAsync("SaveBinary", new object[] {
                        siteUrl,
                        fileUrl,
                        bytes}, this.SaveBinaryOperationCompleted, userState);
        }
        
        private void OnSaveBinaryOperationCompleted(object arg) {
            if ((this.SaveBinaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveBinaryCompleted(this, new SaveBinaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/GetSolutions", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetSolutions() {
            object[] results = this.Invoke("GetSolutions", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSolutionsAsync() {
            this.GetSolutionsAsync(null);
        }
        
        /// <remarks/>
        public void GetSolutionsAsync(object userState) {
            if ((this.GetSolutionsOperationCompleted == null)) {
                this.GetSolutionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSolutionsOperationCompleted);
            }
            this.InvokeAsync("GetSolutions", new object[0], this.GetSolutionsOperationCompleted, userState);
        }
        
        private void OnGetSolutionsOperationCompleted(object arg) {
            if ((this.GetSolutionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSolutionsCompleted(this, new GetSolutionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/GetSols", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Solution[] GetSols() {
            object[] results = this.Invoke("GetSols", new object[0]);
            return ((Solution[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSolsAsync() {
            this.GetSolsAsync(null);
        }
        
        /// <remarks/>
        public void GetSolsAsync(object userState) {
            if ((this.GetSolsOperationCompleted == null)) {
                this.GetSolsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSolsOperationCompleted);
            }
            this.InvokeAsync("GetSols", new object[0], this.GetSolsOperationCompleted, userState);
        }
        
        private void OnGetSolsOperationCompleted(object arg) {
            if ((this.GetSolsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSolsCompleted(this, new GetSolsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/DeploySolution", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeploySolution(string solutionName) {
            object[] results = this.Invoke("DeploySolution", new object[] {
                        solutionName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeploySolutionAsync(string solutionName) {
            this.DeploySolutionAsync(solutionName, null);
        }
        
        /// <remarks/>
        public void DeploySolutionAsync(string solutionName, object userState) {
            if ((this.DeploySolutionOperationCompleted == null)) {
                this.DeploySolutionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeploySolutionOperationCompleted);
            }
            this.InvokeAsync("DeploySolution", new object[] {
                        solutionName}, this.DeploySolutionOperationCompleted, userState);
        }
        
        private void OnDeploySolutionOperationCompleted(object arg) {
            if ((this.DeploySolutionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeploySolutionCompleted(this, new DeploySolutionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/RetractSolution", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RetractSolution(string solutionName) {
            object[] results = this.Invoke("RetractSolution", new object[] {
                        solutionName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RetractSolutionAsync(string solutionName) {
            this.RetractSolutionAsync(solutionName, null);
        }
        
        /// <remarks/>
        public void RetractSolutionAsync(string solutionName, object userState) {
            if ((this.RetractSolutionOperationCompleted == null)) {
                this.RetractSolutionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetractSolutionOperationCompleted);
            }
            this.InvokeAsync("RetractSolution", new object[] {
                        solutionName}, this.RetractSolutionOperationCompleted, userState);
        }
        
        private void OnRetractSolutionOperationCompleted(object arg) {
            if ((this.RetractSolutionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetractSolutionCompleted(this, new RetractSolutionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/DeleteSolution", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteSolution(string solutionName) {
            object[] results = this.Invoke("DeleteSolution", new object[] {
                        solutionName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteSolutionAsync(string solutionName) {
            this.DeleteSolutionAsync(solutionName, null);
        }
        
        /// <remarks/>
        public void DeleteSolutionAsync(string solutionName, object userState) {
            if ((this.DeleteSolutionOperationCompleted == null)) {
                this.DeleteSolutionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSolutionOperationCompleted);
            }
            this.InvokeAsync("DeleteSolution", new object[] {
                        solutionName}, this.DeleteSolutionOperationCompleted, userState);
        }
        
        private void OnDeleteSolutionOperationCompleted(object arg) {
            if ((this.DeleteSolutionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSolutionCompleted(this, new DeleteSolutionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/AddFeature", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddFeature(string siteUrl, System.Guid webGuid, System.Guid featureId) {
            object[] results = this.Invoke("AddFeature", new object[] {
                        siteUrl,
                        webGuid,
                        featureId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddFeatureAsync(string siteUrl, System.Guid webGuid, System.Guid featureId) {
            this.AddFeatureAsync(siteUrl, webGuid, featureId, null);
        }
        
        /// <remarks/>
        public void AddFeatureAsync(string siteUrl, System.Guid webGuid, System.Guid featureId, object userState) {
            if ((this.AddFeatureOperationCompleted == null)) {
                this.AddFeatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFeatureOperationCompleted);
            }
            this.InvokeAsync("AddFeature", new object[] {
                        siteUrl,
                        webGuid,
                        featureId}, this.AddFeatureOperationCompleted, userState);
        }
        
        private void OnAddFeatureOperationCompleted(object arg) {
            if ((this.AddFeatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFeatureCompleted(this, new AddFeatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/RemoveFeature", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemoveFeature(string siteUrl, System.Guid webGuid, System.Guid featureId) {
            object[] results = this.Invoke("RemoveFeature", new object[] {
                        siteUrl,
                        webGuid,
                        featureId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveFeatureAsync(string siteUrl, System.Guid webGuid, System.Guid featureId) {
            this.RemoveFeatureAsync(siteUrl, webGuid, featureId, null);
        }
        
        /// <remarks/>
        public void RemoveFeatureAsync(string siteUrl, System.Guid webGuid, System.Guid featureId, object userState) {
            if ((this.RemoveFeatureOperationCompleted == null)) {
                this.RemoveFeatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveFeatureOperationCompleted);
            }
            this.InvokeAsync("RemoveFeature", new object[] {
                        siteUrl,
                        webGuid,
                        featureId}, this.RemoveFeatureOperationCompleted, userState);
        }
        
        private void OnRemoveFeatureOperationCompleted(object arg) {
            if ((this.RemoveFeatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveFeatureCompleted(this, new RemoveFeatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/PerformFileAction", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PerformFileAction(string siteUrl, string fileUrl, FileActions action) {
            object[] results = this.Invoke("PerformFileAction", new object[] {
                        siteUrl,
                        fileUrl,
                        action});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PerformFileActionAsync(string siteUrl, string fileUrl, FileActions action) {
            this.PerformFileActionAsync(siteUrl, fileUrl, action, null);
        }
        
        /// <remarks/>
        public void PerformFileActionAsync(string siteUrl, string fileUrl, FileActions action, object userState) {
            if ((this.PerformFileActionOperationCompleted == null)) {
                this.PerformFileActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPerformFileActionOperationCompleted);
            }
            this.InvokeAsync("PerformFileAction", new object[] {
                        siteUrl,
                        fileUrl,
                        action}, this.PerformFileActionOperationCompleted, userState);
        }
        
        private void OnPerformFileActionOperationCompleted(object arg) {
            if ((this.PerformFileActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PerformFileActionCompleted(this, new PerformFileActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/getInfo", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getInfo(string siteUrl, System.Guid webUid, System.Guid listGuid) {
            object[] results = this.Invoke("getInfo", new object[] {
                        siteUrl,
                        webUid,
                        listGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getInfoAsync(string siteUrl, System.Guid webUid, System.Guid listGuid) {
            this.getInfoAsync(siteUrl, webUid, listGuid, null);
        }
        
        /// <remarks/>
        public void getInfoAsync(string siteUrl, System.Guid webUid, System.Guid listGuid, object userState) {
            if ((this.getInfoOperationCompleted == null)) {
                this.getInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInfoOperationCompleted);
            }
            this.InvokeAsync("getInfo", new object[] {
                        siteUrl,
                        webUid,
                        listGuid}, this.getInfoOperationCompleted, userState);
        }
        
        private void OngetInfoOperationCompleted(object arg) {
            if ((this.getInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInfoCompleted(this, new getInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/GetOptions", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ListOptions GetOptions(string siteUrl, System.Guid webUid, System.Guid listGuid) {
            object[] results = this.Invoke("GetOptions", new object[] {
                        siteUrl,
                        webUid,
                        listGuid});
            return ((ListOptions)(results[0]));
        }
        
        /// <remarks/>
        public void GetOptionsAsync(string siteUrl, System.Guid webUid, System.Guid listGuid) {
            this.GetOptionsAsync(siteUrl, webUid, listGuid, null);
        }
        
        /// <remarks/>
        public void GetOptionsAsync(string siteUrl, System.Guid webUid, System.Guid listGuid, object userState) {
            if ((this.GetOptionsOperationCompleted == null)) {
                this.GetOptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOptionsOperationCompleted);
            }
            this.InvokeAsync("GetOptions", new object[] {
                        siteUrl,
                        webUid,
                        listGuid}, this.GetOptionsOperationCompleted, userState);
        }
        
        private void OnGetOptionsOperationCompleted(object arg) {
            if ((this.GetOptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOptionsCompleted(this, new GetOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/GetViewSchema", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetViewSchema(string siteUrl, System.Guid webUid, System.Guid listGuid, string viewNAme) {
            object[] results = this.Invoke("GetViewSchema", new object[] {
                        siteUrl,
                        webUid,
                        listGuid,
                        viewNAme});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetViewSchemaAsync(string siteUrl, System.Guid webUid, System.Guid listGuid, string viewNAme) {
            this.GetViewSchemaAsync(siteUrl, webUid, listGuid, viewNAme, null);
        }
        
        /// <remarks/>
        public void GetViewSchemaAsync(string siteUrl, System.Guid webUid, System.Guid listGuid, string viewNAme, object userState) {
            if ((this.GetViewSchemaOperationCompleted == null)) {
                this.GetViewSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetViewSchemaOperationCompleted);
            }
            this.InvokeAsync("GetViewSchema", new object[] {
                        siteUrl,
                        webUid,
                        listGuid,
                        viewNAme}, this.GetViewSchemaOperationCompleted, userState);
        }
        
        private void OnGetViewSchemaOperationCompleted(object arg) {
            if ((this.GetViewSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetViewSchemaCompleted(this, new GetViewSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/GetViewNodes", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetViewNodes(string siteUrl, System.Guid webGuid, System.Guid listGuid) {
            object[] results = this.Invoke("GetViewNodes", new object[] {
                        siteUrl,
                        webGuid,
                        listGuid});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetViewNodesAsync(string siteUrl, System.Guid webGuid, System.Guid listGuid) {
            this.GetViewNodesAsync(siteUrl, webGuid, listGuid, null);
        }
        
        /// <remarks/>
        public void GetViewNodesAsync(string siteUrl, System.Guid webGuid, System.Guid listGuid, object userState) {
            if ((this.GetViewNodesOperationCompleted == null)) {
                this.GetViewNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetViewNodesOperationCompleted);
            }
            this.InvokeAsync("GetViewNodes", new object[] {
                        siteUrl,
                        webGuid,
                        listGuid}, this.GetViewNodesOperationCompleted, userState);
        }
        
        private void OnGetViewNodesOperationCompleted(object arg) {
            if ((this.GetViewNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetViewNodesCompleted(this, new GetViewNodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/GetContentTypeName", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetContentTypeName(string siteUrl, string contentTypeId) {
            object[] results = this.Invoke("GetContentTypeName", new object[] {
                        siteUrl,
                        contentTypeId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetContentTypeNameAsync(string siteUrl, string contentTypeId) {
            this.GetContentTypeNameAsync(siteUrl, contentTypeId, null);
        }
        
        /// <remarks/>
        public void GetContentTypeNameAsync(string siteUrl, string contentTypeId, object userState) {
            if ((this.GetContentTypeNameOperationCompleted == null)) {
                this.GetContentTypeNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContentTypeNameOperationCompleted);
            }
            this.InvokeAsync("GetContentTypeName", new object[] {
                        siteUrl,
                        contentTypeId}, this.GetContentTypeNameOperationCompleted, userState);
        }
        
        private void OnGetContentTypeNameOperationCompleted(object arg) {
            if ((this.GetContentTypeNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContentTypeNameCompleted(this, new GetContentTypeNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/GetContentTypeNames", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetContentTypeNames(string siteUrl, System.Guid webGuid, System.Guid listGuid) {
            object[] results = this.Invoke("GetContentTypeNames", new object[] {
                        siteUrl,
                        webGuid,
                        listGuid});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetContentTypeNamesAsync(string siteUrl, System.Guid webGuid, System.Guid listGuid) {
            this.GetContentTypeNamesAsync(siteUrl, webGuid, listGuid, null);
        }
        
        /// <remarks/>
        public void GetContentTypeNamesAsync(string siteUrl, System.Guid webGuid, System.Guid listGuid, object userState) {
            if ((this.GetContentTypeNamesOperationCompleted == null)) {
                this.GetContentTypeNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContentTypeNamesOperationCompleted);
            }
            this.InvokeAsync("GetContentTypeNames", new object[] {
                        siteUrl,
                        webGuid,
                        listGuid}, this.GetContentTypeNamesOperationCompleted, userState);
        }
        
        private void OnGetContentTypeNamesOperationCompleted(object arg) {
            if ((this.GetContentTypeNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContentTypeNamesCompleted(this, new GetContentTypeNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/GetListSchema", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListSchema(string siteUrl, System.Guid webUid, System.Guid listGuid) {
            object[] results = this.Invoke("GetListSchema", new object[] {
                        siteUrl,
                        webUid,
                        listGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListSchemaAsync(string siteUrl, System.Guid webUid, System.Guid listGuid) {
            this.GetListSchemaAsync(siteUrl, webUid, listGuid, null);
        }
        
        /// <remarks/>
        public void GetListSchemaAsync(string siteUrl, System.Guid webUid, System.Guid listGuid, object userState) {
            if ((this.GetListSchemaOperationCompleted == null)) {
                this.GetListSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListSchemaOperationCompleted);
            }
            this.InvokeAsync("GetListSchema", new object[] {
                        siteUrl,
                        webUid,
                        listGuid}, this.GetListSchemaOperationCompleted, userState);
        }
        
        private void OnGetListSchemaOperationCompleted(object arg) {
            if ((this.GetListSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListSchemaCompleted(this, new GetListSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/UpdateViewSchema", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateViewSchema(string siteUrl, System.Guid webUid, System.Guid listGuid, string viewNAme, string schema) {
            this.Invoke("UpdateViewSchema", new object[] {
                        siteUrl,
                        webUid,
                        listGuid,
                        viewNAme,
                        schema});
        }
        
        /// <remarks/>
        public void UpdateViewSchemaAsync(string siteUrl, System.Guid webUid, System.Guid listGuid, string viewNAme, string schema) {
            this.UpdateViewSchemaAsync(siteUrl, webUid, listGuid, viewNAme, schema, null);
        }
        
        /// <remarks/>
        public void UpdateViewSchemaAsync(string siteUrl, System.Guid webUid, System.Guid listGuid, string viewNAme, string schema, object userState) {
            if ((this.UpdateViewSchemaOperationCompleted == null)) {
                this.UpdateViewSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateViewSchemaOperationCompleted);
            }
            this.InvokeAsync("UpdateViewSchema", new object[] {
                        siteUrl,
                        webUid,
                        listGuid,
                        viewNAme,
                        schema}, this.UpdateViewSchemaOperationCompleted, userState);
        }
        
        private void OnUpdateViewSchemaOperationCompleted(object arg) {
            if ((this.UpdateViewSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateViewSchemaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SPProject/OpenFile", RequestNamespace="http://SPProject", ResponseNamespace="http://SPProject", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] OpenFile(string filePath) {
            object[] results = this.Invoke("OpenFile", new object[] {
                        filePath});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void OpenFileAsync(string filePath) {
            this.OpenFileAsync(filePath, null);
        }
        
        /// <remarks/>
        public void OpenFileAsync(string filePath, object userState) {
            if ((this.OpenFileOperationCompleted == null)) {
                this.OpenFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenFileOperationCompleted);
            }
            this.InvokeAsync("OpenFile", new object[] {
                        filePath}, this.OpenFileOperationCompleted, userState);
        }
        
        private void OnOpenFileOperationCompleted(object arg) {
            if ((this.OpenFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenFileCompleted(this, new OpenFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://SPProject")]
    public partial class Solution {
        
        private string nameField;
        
        private bool deployedField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public bool Deployed {
            get {
                return this.deployedField;
            }
            set {
                this.deployedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://SPProject")]
    public partial class ListOptions {
        
        private bool allowContentTypesField;
        
        private bool contentTypesEnabledField;
        
        /// <remarks/>
        public bool AllowContentTypes {
            get {
                return this.allowContentTypesField;
            }
            set {
                this.allowContentTypesField = value;
            }
        }
        
        /// <remarks/>
        public bool ContentTypesEnabled {
            get {
                return this.contentTypesEnabledField;
            }
            set {
                this.contentTypesEnabledField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://SPProject")]
    public enum FileActions {
        
        /// <remarks/>
        CheckIn,
        
        /// <remarks/>
        CheckOut,
        
        /// <remarks/>
        Delete,
        
        /// <remarks/>
        UndoCheckOut,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetSiteStructureCompletedEventHandler(object sender, GetSiteStructureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteStructureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSiteStructureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void DeleteFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void AddFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void IsCheckedOutCompletedEventHandler(object sender, IsCheckedOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsCheckedOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsCheckedOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void ViewsCompletedEventHandler(object sender, ViewsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ViewsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ViewsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void featureFilesCompletedEventHandler(object sender, featureFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class featureFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal featureFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void OpenBinaryCompletedEventHandler(object sender, OpenBinaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenBinaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenBinaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SaveBinaryCompletedEventHandler(object sender, SaveBinaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveBinaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveBinaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetSolutionsCompletedEventHandler(object sender, GetSolutionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSolutionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSolutionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetSolsCompletedEventHandler(object sender, GetSolsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSolsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSolsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Solution[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Solution[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void DeploySolutionCompletedEventHandler(object sender, DeploySolutionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeploySolutionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeploySolutionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RetractSolutionCompletedEventHandler(object sender, RetractSolutionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetractSolutionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetractSolutionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void DeleteSolutionCompletedEventHandler(object sender, DeleteSolutionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSolutionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteSolutionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void AddFeatureCompletedEventHandler(object sender, AddFeatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFeatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFeatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RemoveFeatureCompletedEventHandler(object sender, RemoveFeatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveFeatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveFeatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void PerformFileActionCompletedEventHandler(object sender, PerformFileActionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PerformFileActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PerformFileActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void getInfoCompletedEventHandler(object sender, getInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetOptionsCompletedEventHandler(object sender, GetOptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ListOptions Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ListOptions)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetViewSchemaCompletedEventHandler(object sender, GetViewSchemaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetViewSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetViewSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetViewNodesCompletedEventHandler(object sender, GetViewNodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetViewNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetViewNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetContentTypeNameCompletedEventHandler(object sender, GetContentTypeNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContentTypeNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContentTypeNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetContentTypeNamesCompletedEventHandler(object sender, GetContentTypeNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContentTypeNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContentTypeNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetListSchemaCompletedEventHandler(object sender, GetListSchemaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void UpdateViewSchemaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void OpenFileCompletedEventHandler(object sender, OpenFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591